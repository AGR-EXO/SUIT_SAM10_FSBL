import subprocess
import re
import os

def get_git_version():
    try:
        # Git 태그 정보를 가져옵니다.
        version = subprocess.check_output(["git", "describe", "--tags"], stderr=subprocess.STDOUT).strip().decode(
            'utf-8')
    except subprocess.CalledProcessError as e:
        print("Git 명령어 실행 중 오류가 발생했습니다:", e.output.decode('utf-8'))
        version = "v0.0.0.00"
    except FileNotFoundError:
        print("Git이 시스템에 설치되어 있지 않거나, 시스템 PATH에 포함되지 않았습니다.")
        version = "v0.0.0.00"
    return version

def parse_version(version):
    # 'v'를 제거하고 버전을 major, minor, patch, debug로 분리합니다.
    match = re.match(r"v(\d+)\.(\d+)\.(\d+)\.(\d+)", version)
    if match:
        major, minor, patch, debug = match.groups()
        return major, minor, patch, debug
    else:
        return "0", "0", "0", "00"

if __name__ == "__main__":
    version = get_git_version()
    major, minor, patch, debug = parse_version(version)

    # 현재 스크립트의 경로를 기반으로 상대 경로 설정
    script_dir = os.path.dirname(os.path.abspath(__file__))
    output_dir = os.path.join(script_dir, "Core", "Inc")
    output_file = os.path.join(output_dir, "version.h")

    with open(output_file, "w") as version_file:
        version_file.write(f'/* Generated by Git Version Auto Generator Script */ \n')
        version_file.write(f'\n')
        version_file.write(f'#define    FW_VER_MAJOR    {major}\n')
        version_file.write(f'#define    FW_VER_MINOR    {minor}\n')
        version_file.write(f'#define    FW_VER_PATCH    {patch}\n')
        version_file.write(f'#define    FW_VER_DEBUG    {debug}\n')
